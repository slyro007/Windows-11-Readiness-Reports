"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/process-reports/route";
exports.ids = ["app/api/process-reports/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fprocess-reports%2Froute&page=%2Fapi%2Fprocess-reports%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fprocess-reports%2Froute.ts&appDir=C%3A%5CTemp%5CWindows11-Readiness-Webapp%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CTemp%5CWindows11-Readiness-Webapp&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fprocess-reports%2Froute&page=%2Fapi%2Fprocess-reports%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fprocess-reports%2Froute.ts&appDir=C%3A%5CTemp%5CWindows11-Readiness-Webapp%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CTemp%5CWindows11-Readiness-Webapp&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_Temp_Windows11_Readiness_Webapp_src_app_api_process_reports_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/process-reports/route.ts */ \"(rsc)/./src/app/api/process-reports/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/process-reports/route\",\n        pathname: \"/api/process-reports\",\n        filename: \"route\",\n        bundlePath: \"app/api/process-reports/route\"\n    },\n    resolvedPagePath: \"C:\\\\Temp\\\\Windows11-Readiness-Webapp\\\\src\\\\app\\\\api\\\\process-reports\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Temp_Windows11_Readiness_Webapp_src_app_api_process_reports_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/process-reports/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZwcm9jZXNzLXJlcG9ydHMlMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRnByb2Nlc3MtcmVwb3J0cyUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRnByb2Nlc3MtcmVwb3J0cyUyRnJvdXRlLnRzJmFwcERpcj1DJTNBJTVDVGVtcCU1Q1dpbmRvd3MxMS1SZWFkaW5lc3MtV2ViYXBwJTVDc3JjJTVDYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj1DJTNBJTVDVGVtcCU1Q1dpbmRvd3MxMS1SZWFkaW5lc3MtV2ViYXBwJmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDYztBQUM4QjtBQUMzRztBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0hBQW1CO0FBQzNDO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLGlFQUFpRTtBQUN6RTtBQUNBO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ3VIOztBQUV2SCIsInNvdXJjZXMiOlsid2VicGFjazovL3dpbmRvd3MxMS1yZXBvcnQtd2ViYXBwLz8yMjBhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcFJvdXRlUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgcGF0Y2hGZXRjaCBhcyBfcGF0Y2hGZXRjaCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2xpYi9wYXRjaC1mZXRjaFwiO1xuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIkM6XFxcXFRlbXBcXFxcV2luZG93czExLVJlYWRpbmVzcy1XZWJhcHBcXFxcc3JjXFxcXGFwcFxcXFxhcGlcXFxccHJvY2Vzcy1yZXBvcnRzXFxcXHJvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcIlwiXG5jb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBSb3V0ZVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUk9VVEUsXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9wcm9jZXNzLXJlcG9ydHMvcm91dGVcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9wcm9jZXNzLXJlcG9ydHNcIixcbiAgICAgICAgZmlsZW5hbWU6IFwicm91dGVcIixcbiAgICAgICAgYnVuZGxlUGF0aDogXCJhcHAvYXBpL3Byb2Nlc3MtcmVwb3J0cy9yb3V0ZVwiXG4gICAgfSxcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIkM6XFxcXFRlbXBcXFxcV2luZG93czExLVJlYWRpbmVzcy1XZWJhcHBcXFxcc3JjXFxcXGFwcFxcXFxhcGlcXFxccHJvY2Vzcy1yZXBvcnRzXFxcXHJvdXRlLnRzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MgfSA9IHJvdXRlTW9kdWxlO1xuY29uc3Qgb3JpZ2luYWxQYXRobmFtZSA9IFwiL2FwaS9wcm9jZXNzLXJlcG9ydHMvcm91dGVcIjtcbmZ1bmN0aW9uIHBhdGNoRmV0Y2goKSB7XG4gICAgcmV0dXJuIF9wYXRjaEZldGNoKHtcbiAgICAgICAgc2VydmVySG9va3MsXG4gICAgICAgIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2VcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgb3JpZ2luYWxQYXRobmFtZSwgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fprocess-reports%2Froute&page=%2Fapi%2Fprocess-reports%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fprocess-reports%2Froute.ts&appDir=C%3A%5CTemp%5CWindows11-Readiness-Webapp%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CTemp%5CWindows11-Readiness-Webapp&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./src/app/api/process-reports/route.ts":
/*!**********************************************!*\
  !*** ./src/app/api/process-reports/route.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n\n// Helper function to simulate the Python processing logic\nfunction processRmmData(rmmData, scalepadData, companyInfo) {\n    // Parse the Output column to extract Windows 11 readiness and specifications\n    function parseOutputData(outputText) {\n        if (!outputText || typeof outputText !== \"string\" || outputText.trim() === \"\") {\n            return {\n                win11_ready: \"Offline\",\n                ram: \"Offline\",\n                tpm: \"Offline\",\n                cpu: \"Offline\",\n                os: \"Offline\",\n                secure_boot: \"Offline\"\n            };\n        }\n        const output = outputText.trim();\n        // Check for \"Machine was offline\" specifically\n        if (output.includes(\"Machine was offline\")) {\n            return {\n                win11_ready: \"Offline\",\n                ram: \"Offline\",\n                tpm: \"Offline\",\n                cpu: \"Offline\",\n                os: \"Offline\",\n                secure_boot: \"Offline\"\n            };\n        }\n        // Initialize result with default values\n        const result = {\n            win11_ready: \"Unknown\",\n            ram: \"Unknown\",\n            tpm: \"Unknown\",\n            cpu: \"Unknown\",\n            os: \"Unknown\",\n            secure_boot: \"Unknown\"\n        };\n        // Parse Memory\n        const memoryMatch = output.match(/Memory:\\s*System_Memory=(\\d+)GB\\s*::\\s*(PASS|FAIL)/i);\n        if (memoryMatch) {\n            result.ram = `${memoryMatch[1]}GB`;\n        }\n        // Parse TPM\n        const tpmMatch = output.match(/TPM:\\s*TPMVersion=([^:]+)\\s*::\\s*(PASS|FAIL)/i);\n        if (tpmMatch) {\n            result.tpm = tpmMatch[1].split(\",\")[0] // Get just the version number\n            ;\n        }\n        // Parse OS\n        const osMatch = output.match(/OsVersion:\\s*version=([^:]+)\\s*::\\s*(PASS|FAIL)/i);\n        if (osMatch) {\n            result.os = osMatch[1].replace(/Microsoft\\s+/i, \"\").trim();\n        }\n        // Parse SecureBoot - this is complex because it has multiple indicators\n        const secureBootCapable = output.includes(\"SecureBoot: Capable :: PASS\");\n        const secureBootDisabled = output.includes(\"Secure Boot is not enabled :: FAIL\");\n        const secureBootEnabled = output.includes(\"Secure Boot is enabled :: PASS\");\n        if (secureBootCapable) {\n            if (secureBootEnabled) {\n                result.secure_boot = \"Enabled\";\n            } else if (secureBootDisabled) {\n                result.secure_boot = \"Capable but Disabled\";\n            } else {\n                // If capable and no explicit disabled message, assume it's enabled\n                result.secure_boot = \"Enabled\";\n            }\n        } else {\n            result.secure_boot = \"Not Capable\";\n        }\n        // Parse CPU - extract Intel generation from processor info\n        const processorMatch = output.match(/Caption=Intel64 Family 6 Model (\\d+)/i);\n        if (processorMatch) {\n            const model = parseInt(processorMatch[1]);\n            const generation = getIntelGeneration(model);\n            if (generation > 0) {\n                result.cpu = `Intel ${generation}th Gen (Model ${model})`;\n            } else {\n                result.cpu = `Intel Unknown Gen (Model ${model})`;\n            }\n        }\n        // Determine Windows 11 readiness based on component analysis\n        // This follows the same logic as the Python script\n        const memoryPassed = output.includes(\"Memory:\") && output.includes(\":: PASS\");\n        const tpmPassed = output.includes(\"TPM:\") && output.includes(\":: PASS\");\n        const secureBootPassed = secureBootCapable;\n        const processorPassed = output.includes(\"Processor:\") && output.includes(\":: PASS\");\n        // Check if running Windows 11 already\n        const isWindows11 = result.os.includes(\"Windows 11\");\n        // Check for explicit status first - trust the RMM tool's assessment\n        if (output.includes(\"Status : Supported\")) {\n            // If RMM says \"Supported\", it means Windows 11 ready\n            result.win11_ready = \"Pass\";\n        } else if (output.includes(\"Status : Unsupported\")) {\n            // If RMM says \"Unsupported\", check if it's due to SecureBoot or other issues\n            if (secureBootCapable && memoryPassed && tpmPassed && processorPassed) {\n                // Hardware meets requirements but something else (likely SecureBoot disabled)\n                result.win11_ready = \"Unsupported\";\n            } else {\n                // Hardware doesn't meet basic requirements\n                result.win11_ready = \"Fail\";\n            }\n        } else if (output.includes(\"Status : Unknown\")) {\n            result.win11_ready = \"Offline\";\n        } else {\n            // Fallback logic for machines without explicit status\n            if (isWindows11 && memoryPassed && tpmPassed && secureBootPassed && processorPassed) {\n                result.win11_ready = \"Pass\" // Already on Windows 11 and everything works\n                ;\n            } else if (memoryPassed && tpmPassed && secureBootPassed && processorPassed) {\n                if (result.secure_boot === \"Enabled\") {\n                    result.win11_ready = \"Pass\" // Ready for Windows 11\n                    ;\n                } else {\n                    result.win11_ready = \"Unsupported\" // Capable but SecureBoot disabled\n                    ;\n                }\n            } else {\n                // Check what's failing\n                if (!memoryPassed || !tpmPassed || !processorPassed) {\n                    result.win11_ready = \"Fail\" // Hardware doesn't meet requirements\n                    ;\n                } else if (!secureBootPassed) {\n                    result.win11_ready = \"Unsupported\" // Hardware doesn't support SecureBoot\n                    ;\n                } else {\n                    result.win11_ready = \"Fail\" // Other compatibility issues\n                    ;\n                }\n            }\n        }\n        return result;\n    }\n    // Helper function to determine Intel generation (from Python script)\n    function getIntelGeneration(modelNumber) {\n        // Intel model number to generation mapping \n        // Based on actual Intel processor model numbers\n        if (modelNumber >= 206) return 14; // 14th gen (Meteor Lake, Arrow Lake)\n        if (modelNumber >= 183) return 13; // 13th gen (Raptor Lake)\n        if (modelNumber >= 154) return 12; // 12th gen (Alder Lake)\n        if (modelNumber >= 140) return 11; // 11th gen (Tiger Lake, Rocket Lake)  \n        if (modelNumber >= 125) return 10; // 10th gen (Ice Lake, Comet Lake)\n        if (modelNumber >= 159) return 9; // 9th gen (Coffee Lake Refresh) - specific models\n        if (modelNumber >= 142) return 8; // 8th gen (Coffee Lake) - includes Model 158\n        if (modelNumber >= 78) return 7; // 7th gen (Kaby Lake)\n        if (modelNumber >= 74) return 6; // 6th gen (Skylake)\n        if (modelNumber >= 61) return 5; // 5th gen (Broadwell)\n        if (modelNumber >= 60) return 4; // 4th gen (Haswell)\n        if (modelNumber >= 58) return 3; // 3rd gen (Ivy Bridge)\n        if (modelNumber >= 42) return 2; // 2nd gen (Sandy Bridge)\n        if (modelNumber >= 26) return 1; // 1st gen (Nehalem, Westmere)\n        return 0; // Unknown or very old\n    }\n    // Process each machine\n    const processedData = rmmData.map((machine)=>{\n        // Get the Output data - this contains the actual Windows 11 compatibility info\n        let outputText = machine[\"Output\"] || \"\";\n        const outputData = parseOutputData(outputText);\n        // Find matching ScalePad data\n        const scalepadMatch = scalepadData.find((sp)=>{\n            const machineName = (machine[\"Machine name\"] || \"\").toLowerCase().trim();\n            const scalepadName = (sp[\"Name\"] || \"\").toLowerCase().trim();\n            return machineName === scalepadName;\n        });\n        return {\n            \"Workstation\": machine[\"Machine name\"] || \"Unknown\",\n            \"Friendly Name\": machine[\"Friendly name\"] || \"\",\n            \"Site\": machine[\"Site name\"] || \"\",\n            \"Serial\": scalepadMatch?.[\"Serial\"] || \"\",\n            \"Windows 11 Status\": outputData.win11_ready,\n            \"RAM\": outputData.ram,\n            \"CPU\": outputData.cpu,\n            \"TPM Version\": outputData.tpm,\n            \"SecureBoot\": outputData.secure_boot,\n            \"OS Version\": outputData.os,\n            \"Warranty Expires\": scalepadMatch?.[\"Expires\"] || \"Unknown\",\n            \"In ScalePad\": scalepadMatch ? \"Yes\" : \"No\"\n        };\n    });\n    return processedData;\n}\n// Generate summary statistics\nfunction generateSummary(processedData) {\n    const total = processedData.length;\n    const compatible = processedData.filter((row)=>row[\"Windows 11 Status\"] === \"Pass\").length;\n    const notCompatible = processedData.filter((row)=>row[\"Windows 11 Status\"] === \"Fail\").length;\n    const unsupported = processedData.filter((row)=>row[\"Windows 11 Status\"] === \"Unsupported\").length;\n    const offline = processedData.filter((row)=>row[\"Windows 11 Status\"] === \"Offline\" || row[\"Windows 11 Status\"] === \"Unknown\").length;\n    const secureBootStats = {\n        capableEnabled: processedData.filter((row)=>row[\"SecureBoot\"] === \"Enabled\").length,\n        capableDisabled: processedData.filter((row)=>row[\"SecureBoot\"] === \"Capable but Disabled\").length,\n        notCapable: processedData.filter((row)=>row[\"SecureBoot\"] === \"Not Capable\").length,\n        offline: processedData.filter((row)=>row[\"SecureBoot\"] === \"Offline\" || row[\"SecureBoot\"] === \"Unknown\").length\n    };\n    return {\n        total,\n        compatible,\n        notCompatible,\n        unsupported,\n        offline,\n        secureBootStats\n    };\n}\n// Generate Excel file (simplified - in production you'd use a library like xlsx)\nfunction generateExcelFile(processedData, companyInfo) {\n    // For now, we'll return a CSV format as base64\n    // In production, you'd use xlsx library to create actual Excel files\n    const headers = [\n        \"Workstation\",\n        \"Friendly Name\",\n        \"Site\",\n        \"Serial\",\n        \"Windows 11 Status\",\n        \"RAM\",\n        \"CPU\",\n        \"TPM Version\",\n        \"SecureBoot\",\n        \"OS Version\",\n        \"Warranty Expires\",\n        \"In ScalePad\"\n    ];\n    let csvContent = headers.join(\",\") + \"\\n\";\n    processedData.forEach((row)=>{\n        const values = headers.map((header)=>{\n            const value = row[header] || \"\";\n            return `\"${value.toString().replace(/\"/g, '\"\"')}\"`;\n        });\n        csvContent += values.join(\",\") + \"\\n\";\n    });\n    return Buffer.from(csvContent).toString(\"base64\");\n}\n// Generate comprehensive report data (no HTML file)\nfunction generateReportData(processedData, companyInfo, stats) {\n    const { total, compatible, notCompatible, unsupported, offline, secureBootStats } = stats;\n    // Calculate additional statistics for charts\n    const siteStats = {};\n    const osStats = {};\n    const cpuStats = {};\n    const ramStats = {};\n    processedData.forEach((row)=>{\n        // Site statistics\n        const site = row[\"Site\"] || \"Unknown\";\n        if (!siteStats[site]) siteStats[site] = {\n            total: 0,\n            compatible: 0,\n            notCompatible: 0,\n            unsupported: 0,\n            offline: 0\n        };\n        siteStats[site].total++;\n        if (row[\"Windows 11 Status\"] === \"Pass\") siteStats[site].compatible++;\n        else if (row[\"Windows 11 Status\"] === \"Fail\") siteStats[site].notCompatible++;\n        else if (row[\"Windows 11 Status\"] === \"Unsupported\") siteStats[site].unsupported++;\n        else siteStats[site].offline++;\n        // OS statistics\n        const os = row[\"OS Version\"] || \"Unknown\";\n        if (!osStats[os]) osStats[os] = 0;\n        osStats[os]++;\n        // CPU statistics\n        const cpu = row[\"CPU\"] || \"Unknown\";\n        if (!cpuStats[cpu]) cpuStats[cpu] = 0;\n        cpuStats[cpu]++;\n        // RAM statistics\n        const ram = row[\"RAM\"] || \"Unknown\";\n        if (!ramStats[ram]) ramStats[ram] = 0;\n        ramStats[ram]++;\n    });\n    // Create chart data\n    const readinessChartData = [\n        {\n            name: \"Windows 11 Ready\",\n            value: compatible,\n            color: \"#4CAF50\"\n        },\n        {\n            name: \"Not Windows 11 Ready\",\n            value: notCompatible,\n            color: \"#F44336\"\n        },\n        {\n            name: \"Unsupported\",\n            value: unsupported,\n            color: \"#FF9800\"\n        },\n        {\n            name: \"Offline\",\n            value: offline,\n            color: \"#9E9E9E\"\n        }\n    ];\n    const siteChartData = Object.keys(siteStats).map((site)=>({\n            site,\n            compatible: siteStats[site].compatible,\n            notCompatible: siteStats[site].notCompatible,\n            unsupported: siteStats[site].unsupported,\n            offline: siteStats[site].offline\n        }));\n    const secureBootChartData = [\n        {\n            name: \"Enabled\",\n            value: secureBootStats.capableEnabled,\n            color: \"#4CAF50\"\n        },\n        {\n            name: \"Disabled\",\n            value: secureBootStats.capableDisabled,\n            color: \"#F44336\"\n        },\n        {\n            name: \"Not Present\",\n            value: secureBootStats.notCapable,\n            color: \"#FF9800\"\n        },\n        {\n            name: \"Offline\",\n            value: secureBootStats.offline,\n            color: \"#9E9E9E\"\n        }\n    ];\n    return {\n        summary: {\n            total,\n            compatible,\n            notCompatible,\n            unsupported,\n            offline,\n            compatiblePercentage: total > 0 ? Math.round(compatible / total * 100) : 0,\n            notCompatiblePercentage: total > 0 ? Math.round(notCompatible / total * 100) : 0,\n            unsupportedPercentage: total > 0 ? Math.round(unsupported / total * 100) : 0,\n            offlinePercentage: total > 0 ? Math.round(offline / total * 100) : 0\n        },\n        secureBootStats,\n        charts: {\n            readiness: readinessChartData,\n            siteBreakdown: siteChartData,\n            secureBoot: secureBootChartData\n        },\n        data: processedData,\n        companyInfo\n    };\n}\n// Generate recommendations based on the data\nfunction generateRecommendations(processedData, stats) {\n    const { summary } = stats;\n    const recommendations = [];\n    // Windows 11 readiness recommendations\n    if (summary.notCompatible > 0) {\n        recommendations.push({\n            type: \"warning\",\n            title: \"Hardware Upgrades Needed\",\n            description: `${summary.notCompatible} workstations need hardware upgrades to support Windows 11`,\n            priority: \"high\"\n        });\n    }\n    if (summary.unsupported > 0) {\n        recommendations.push({\n            type: \"info\",\n            title: \"SecureBoot Configuration\",\n            description: `${summary.unsupported} workstations are Windows 11 ready but have SecureBoot disabled`,\n            priority: \"medium\"\n        });\n    }\n    if (summary.offline > 0) {\n        recommendations.push({\n            type: \"warning\",\n            title: \"Offline Systems\",\n            description: `${summary.offline} workstations are offline and need to be checked for Windows 11 readiness`,\n            priority: \"medium\"\n        });\n    }\n    // Warranty recommendations\n    const expiredWarranty = processedData.filter((row)=>row[\"Warranty Expires\"] === \"Expired\").length;\n    if (expiredWarranty > 0) {\n        recommendations.push({\n            type: \"error\",\n            title: \"Warranty Expired\",\n            description: `${expiredWarranty} workstations have expired warranties`,\n            priority: \"high\"\n        });\n    }\n    const notInScalePad = processedData.filter((row)=>row[\"In ScalePad\"] === \"No\").length;\n    if (notInScalePad > 0) {\n        recommendations.push({\n            type: \"warning\",\n            title: \"Missing from ScalePad\",\n            description: `${notInScalePad} workstations are not tracked in ScalePad`,\n            priority: \"medium\"\n        });\n    }\n    return recommendations;\n}\nasync function POST(request) {\n    try {\n        const data = await request.json();\n        console.log(\"Processing request for:\", data.companyInfo?.name, \"with\", data.files?.length, \"files\");\n        // Validate input\n        if (!data.files || data.files.length !== 2) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Two files are required: RMM Report and ScalePad Report\"\n            }, {\n                status: 400\n            });\n        }\n        if (!data.companyInfo?.name?.trim()) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Company name is required\"\n            }, {\n                status: 400\n            });\n        }\n        if (!data.companyInfo?.tenant?.trim()) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Tenant slug is required\"\n            }, {\n                status: 400\n            });\n        }\n        // Find RMM and ScalePad files\n        const rmmFile = data.files.find((f)=>f.type === \"rmm\");\n        const scalepadFile = data.files.find((f)=>f.type === \"scalepad\");\n        if (!rmmFile || !scalepadFile) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Both RMM and ScalePad files are required\"\n            }, {\n                status: 400\n            });\n        }\n        console.log(\"Processing\", rmmFile.data.length, \"machines from RMM report\");\n        // Process the data\n        const processedData = processRmmData(rmmFile.data, scalepadFile.data, data.companyInfo);\n        // Generate summary statistics\n        const summary = generateSummary(processedData);\n        // Generate report data\n        const reportData = generateReportData(processedData, data.companyInfo, summary);\n        // Generate Excel file\n        try {\n            const excelFile = generateExcelFile(processedData, data.companyInfo);\n            console.log(\"Excel file generated successfully, length:\", excelFile.length);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: true,\n                summary: reportData.summary,\n                secureBootStats: reportData.secureBootStats,\n                charts: reportData.charts,\n                data: reportData.data,\n                companyInfo: reportData.companyInfo,\n                files: {\n                    excel: `data:text/csv;base64,${excelFile}`\n                }\n            });\n        } catch (error) {\n            console.error(\"Error generating Excel file:\", error);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                success: true,\n                summary: reportData.summary,\n                secureBootStats: reportData.secureBootStats,\n                charts: reportData.charts,\n                data: reportData.data,\n                companyInfo: reportData.companyInfo,\n                files: {\n                    excel: null\n                }\n            });\n        }\n    } catch (error) {\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Internal server error\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvYXBwL2FwaS9wcm9jZXNzLXJlcG9ydHMvcm91dGUudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBdUQ7QUFpQnZELDBEQUEwRDtBQUMxRCxTQUFTQyxlQUFlQyxPQUFjLEVBQUVDLFlBQW1CLEVBQUVDLFdBQTJEO0lBQ3RILDZFQUE2RTtJQUM3RSxTQUFTQyxnQkFBZ0JDLFVBQWtCO1FBQ3pDLElBQUksQ0FBQ0EsY0FBYyxPQUFPQSxlQUFlLFlBQVlBLFdBQVdDLElBQUksT0FBTyxJQUFJO1lBQzdFLE9BQU87Z0JBQ0xDLGFBQWE7Z0JBQ2JDLEtBQUs7Z0JBQ0xDLEtBQUs7Z0JBQ0xDLEtBQUs7Z0JBQ0xDLElBQUk7Z0JBQ0pDLGFBQWE7WUFDZjtRQUNGO1FBRUEsTUFBTUMsU0FBU1IsV0FBV0MsSUFBSTtRQUU5QiwrQ0FBK0M7UUFDL0MsSUFBSU8sT0FBT0MsUUFBUSxDQUFDLHdCQUF3QjtZQUMxQyxPQUFPO2dCQUNMUCxhQUFhO2dCQUNiQyxLQUFLO2dCQUNMQyxLQUFLO2dCQUNMQyxLQUFLO2dCQUNMQyxJQUFJO2dCQUNKQyxhQUFhO1lBQ2Y7UUFDRjtRQUVBLHdDQUF3QztRQUN4QyxNQUFNRyxTQUFTO1lBQ2JSLGFBQWE7WUFDYkMsS0FBSztZQUNMQyxLQUFLO1lBQ0xDLEtBQUs7WUFDTEMsSUFBSTtZQUNKQyxhQUFhO1FBQ2Y7UUFFQSxlQUFlO1FBQ2YsTUFBTUksY0FBY0gsT0FBT0ksS0FBSyxDQUFDO1FBQ2pDLElBQUlELGFBQWE7WUFDZkQsT0FBT1AsR0FBRyxHQUFHLENBQUMsRUFBRVEsV0FBVyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7UUFDcEM7UUFFQSxZQUFZO1FBQ1osTUFBTUUsV0FBV0wsT0FBT0ksS0FBSyxDQUFDO1FBQzlCLElBQUlDLFVBQVU7WUFDWkgsT0FBT04sR0FBRyxHQUFHUyxRQUFRLENBQUMsRUFBRSxDQUFDQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyw4QkFBOEI7O1FBQ3ZFO1FBRUEsV0FBVztR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cG9ydC13ZWJhcHAvLi9zcmMvYXBwL2FwaS9wcm9jZXNzLXJlcG9ydHMvcm91dGUudHM/NjkzMCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZXh0UmVxdWVzdCwgTmV4dFJlc3BvbnNlIH0gZnJvbSAnbmV4dC9zZXJ2ZXInXG5cbi8vIFR5cGVTY3JpcHQgaW50ZXJmYWNlIGZvciB0aGUgcmVxdWVzdCBkYXRhXG5pbnRlcmZhY2UgUHJvY2Vzc1JlcG9ydHNSZXF1ZXN0IHtcbiAgZmlsZXM6IEFycmF5PHtcbiAgICBuYW1lOiBzdHJpbmdcbiAgICB0eXBlOiAncm1tJyB8ICdzY2FsZXBhZCdcbiAgICBkYXRhOiBhbnlbXVxuICAgIHNpemU6IG51bWJlclxuICB9PlxuICBjb21wYW55SW5mbzoge1xuICAgIG5hbWU6IHN0cmluZ1xuICAgIHNpdGU6IHN0cmluZ1xuICAgIHRlbmFudDogc3RyaW5nXG4gIH1cbn1cblxuLy8gSGVscGVyIGZ1bmN0aW9uIHRvIHNpbXVsYXRlIHRoZSBQeXRob24gcHJvY2Vzc2luZyBsb2dpY1xuZnVuY3Rpb24gcHJvY2Vzc1JtbURhdGEocm1tRGF0YTogYW55W10sIHNjYWxlcGFkRGF0YTogYW55W10sIGNvbXBhbnlJbmZvOiB7IG5hbWU6IHN0cmluZzsgc2l0ZTogc3RyaW5nOyB0ZW5hbnQ6IHN0cmluZyB9KSB7XG4gIC8vIFBhcnNlIHRoZSBPdXRwdXQgY29sdW1uIHRvIGV4dHJhY3QgV2luZG93cyAxMSByZWFkaW5lc3MgYW5kIHNwZWNpZmljYXRpb25zXG4gIGZ1bmN0aW9uIHBhcnNlT3V0cHV0RGF0YShvdXRwdXRUZXh0OiBzdHJpbmcpIHtcbiAgICBpZiAoIW91dHB1dFRleHQgfHwgdHlwZW9mIG91dHB1dFRleHQgIT09ICdzdHJpbmcnIHx8IG91dHB1dFRleHQudHJpbSgpID09PSAnJykge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgd2luMTFfcmVhZHk6ICdPZmZsaW5lJyxcbiAgICAgICAgcmFtOiAnT2ZmbGluZScsXG4gICAgICAgIHRwbTogJ09mZmxpbmUnLFxuICAgICAgICBjcHU6ICdPZmZsaW5lJyxcbiAgICAgICAgb3M6ICdPZmZsaW5lJyxcbiAgICAgICAgc2VjdXJlX2Jvb3Q6ICdPZmZsaW5lJ1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IG91dHB1dCA9IG91dHB1dFRleHQudHJpbSgpXG4gICAgXG4gICAgLy8gQ2hlY2sgZm9yIFwiTWFjaGluZSB3YXMgb2ZmbGluZVwiIHNwZWNpZmljYWxseVxuICAgIGlmIChvdXRwdXQuaW5jbHVkZXMoJ01hY2hpbmUgd2FzIG9mZmxpbmUnKSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgd2luMTFfcmVhZHk6ICdPZmZsaW5lJyxcbiAgICAgICAgcmFtOiAnT2ZmbGluZScsXG4gICAgICAgIHRwbTogJ09mZmxpbmUnLFxuICAgICAgICBjcHU6ICdPZmZsaW5lJyxcbiAgICAgICAgb3M6ICdPZmZsaW5lJyxcbiAgICAgICAgc2VjdXJlX2Jvb3Q6ICdPZmZsaW5lJ1xuICAgICAgfVxuICAgIH1cbiAgICBcbiAgICAvLyBJbml0aWFsaXplIHJlc3VsdCB3aXRoIGRlZmF1bHQgdmFsdWVzXG4gICAgY29uc3QgcmVzdWx0ID0ge1xuICAgICAgd2luMTFfcmVhZHk6ICdVbmtub3duJyxcbiAgICAgIHJhbTogJ1Vua25vd24nLFxuICAgICAgdHBtOiAnVW5rbm93bicsXG4gICAgICBjcHU6ICdVbmtub3duJyxcbiAgICAgIG9zOiAnVW5rbm93bicsXG4gICAgICBzZWN1cmVfYm9vdDogJ1Vua25vd24nXG4gICAgfVxuXG4gICAgLy8gUGFyc2UgTWVtb3J5XG4gICAgY29uc3QgbWVtb3J5TWF0Y2ggPSBvdXRwdXQubWF0Y2goL01lbW9yeTpcXHMqU3lzdGVtX01lbW9yeT0oXFxkKylHQlxccyo6OlxccyooUEFTU3xGQUlMKS9pKVxuICAgIGlmIChtZW1vcnlNYXRjaCkge1xuICAgICAgcmVzdWx0LnJhbSA9IGAke21lbW9yeU1hdGNoWzFdfUdCYFxuICAgIH1cblxuICAgIC8vIFBhcnNlIFRQTVxuICAgIGNvbnN0IHRwbU1hdGNoID0gb3V0cHV0Lm1hdGNoKC9UUE06XFxzKlRQTVZlcnNpb249KFteOl0rKVxccyo6OlxccyooUEFTU3xGQUlMKS9pKVxuICAgIGlmICh0cG1NYXRjaCkge1xuICAgICAgcmVzdWx0LnRwbSA9IHRwbU1hdGNoWzFdLnNwbGl0KCcsJylbMF0gLy8gR2V0IGp1c3QgdGhlIHZlcnNpb24gbnVtYmVyXG4gICAgfVxuXG4gICAgLy8gUGFyc2UgT1NcbiAgICBjb25zdCBvc01hdGNoID0gb3V0cHV0Lm1hdGNoKC9Pc1ZlcnNpb246XFxzKnZlcnNpb249KFteOl0rKVxccyo6OlxccyooUEFTU3xGQUlMKS9pKVxuICAgIGlmIChvc01hdGNoKSB7XG4gICAgICByZXN1bHQub3MgPSBvc01hdGNoWzFdLnJlcGxhY2UoL01pY3Jvc29mdFxccysvaSwgJycpLnRyaW0oKVxuICAgIH1cblxuICAgIC8vIFBhcnNlIFNlY3VyZUJvb3QgLSB0aGlzIGlzIGNvbXBsZXggYmVjYXVzZSBpdCBoYXMgbXVsdGlwbGUgaW5kaWNhdG9yc1xuICAgIGNvbnN0IHNlY3VyZUJvb3RDYXBhYmxlID0gb3V0cHV0LmluY2x1ZGVzKCdTZWN1cmVCb290OiBDYXBhYmxlIDo6IFBBU1MnKVxuICAgIGNvbnN0IHNlY3VyZUJvb3REaXNhYmxlZCA9IG91dHB1dC5pbmNsdWRlcygnU2VjdXJlIEJvb3QgaXMgbm90IGVuYWJsZWQgOjogRkFJTCcpXG4gICAgY29uc3Qgc2VjdXJlQm9vdEVuYWJsZWQgPSBvdXRwdXQuaW5jbHVkZXMoJ1NlY3VyZSBCb290IGlzIGVuYWJsZWQgOjogUEFTUycpXG4gICAgXG4gICAgaWYgKHNlY3VyZUJvb3RDYXBhYmxlKSB7XG4gICAgICBpZiAoc2VjdXJlQm9vdEVuYWJsZWQpIHtcbiAgICAgICAgcmVzdWx0LnNlY3VyZV9ib290ID0gJ0VuYWJsZWQnXG4gICAgICB9IGVsc2UgaWYgKHNlY3VyZUJvb3REaXNhYmxlZCkge1xuICAgICAgICByZXN1bHQuc2VjdXJlX2Jvb3QgPSAnQ2FwYWJsZSBidXQgRGlzYWJsZWQnXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBJZiBjYXBhYmxlIGFuZCBubyBleHBsaWNpdCBkaXNhYmxlZCBtZXNzYWdlLCBhc3N1bWUgaXQncyBlbmFibGVkXG4gICAgICAgIHJlc3VsdC5zZWN1cmVfYm9vdCA9ICdFbmFibGVkJ1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQuc2VjdXJlX2Jvb3QgPSAnTm90IENhcGFibGUnXG4gICAgfVxuICAgIFxuICAgIC8vIFBhcnNlIENQVSAtIGV4dHJhY3QgSW50ZWwgZ2VuZXJhdGlvbiBmcm9tIHByb2Nlc3NvciBpbmZvXG4gICAgY29uc3QgcHJvY2Vzc29yTWF0Y2ggPSBvdXRwdXQubWF0Y2goL0NhcHRpb249SW50ZWw2NCBGYW1pbHkgNiBNb2RlbCAoXFxkKykvaSlcbiAgICBpZiAocHJvY2Vzc29yTWF0Y2gpIHtcbiAgICAgIGNvbnN0IG1vZGVsID0gcGFyc2VJbnQocHJvY2Vzc29yTWF0Y2hbMV0pXG4gICAgICBjb25zdCBnZW5lcmF0aW9uID0gZ2V0SW50ZWxHZW5lcmF0aW9uKG1vZGVsKVxuICAgICAgaWYgKGdlbmVyYXRpb24gPiAwKSB7XG4gICAgICAgIHJlc3VsdC5jcHUgPSBgSW50ZWwgJHtnZW5lcmF0aW9ufXRoIEdlbiAoTW9kZWwgJHttb2RlbH0pYFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0LmNwdSA9IGBJbnRlbCBVbmtub3duIEdlbiAoTW9kZWwgJHttb2RlbH0pYFxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIERldGVybWluZSBXaW5kb3dzIDExIHJlYWRpbmVzcyBiYXNlZCBvbiBjb21wb25lbnQgYW5hbHlzaXNcbiAgICAvLyBUaGlzIGZvbGxvd3MgdGhlIHNhbWUgbG9naWMgYXMgdGhlIFB5dGhvbiBzY3JpcHRcbiAgICBjb25zdCBtZW1vcnlQYXNzZWQgPSBvdXRwdXQuaW5jbHVkZXMoJ01lbW9yeTonKSAmJiBvdXRwdXQuaW5jbHVkZXMoJzo6IFBBU1MnKVxuICAgIGNvbnN0IHRwbVBhc3NlZCA9IG91dHB1dC5pbmNsdWRlcygnVFBNOicpICYmIG91dHB1dC5pbmNsdWRlcygnOjogUEFTUycpXG4gICAgY29uc3Qgc2VjdXJlQm9vdFBhc3NlZCA9IHNlY3VyZUJvb3RDYXBhYmxlXG4gICAgY29uc3QgcHJvY2Vzc29yUGFzc2VkID0gb3V0cHV0LmluY2x1ZGVzKCdQcm9jZXNzb3I6JykgJiYgb3V0cHV0LmluY2x1ZGVzKCc6OiBQQVNTJylcbiAgICBcbiAgICAvLyBDaGVjayBpZiBydW5uaW5nIFdpbmRvd3MgMTEgYWxyZWFkeVxuICAgIGNvbnN0IGlzV2luZG93czExID0gcmVzdWx0Lm9zLmluY2x1ZGVzKCdXaW5kb3dzIDExJylcbiAgICBcbiAgICAvLyBDaGVjayBmb3IgZXhwbGljaXQgc3RhdHVzIGZpcnN0IC0gdHJ1c3QgdGhlIFJNTSB0b29sJ3MgYXNzZXNzbWVudFxuICAgIGlmIChvdXRwdXQuaW5jbHVkZXMoJ1N0YXR1cyA6IFN1cHBvcnRlZCcpKSB7XG4gICAgICAvLyBJZiBSTU0gc2F5cyBcIlN1cHBvcnRlZFwiLCBpdCBtZWFucyBXaW5kb3dzIDExIHJlYWR5XG4gICAgICByZXN1bHQud2luMTFfcmVhZHkgPSAnUGFzcydcbiAgICB9IGVsc2UgaWYgKG91dHB1dC5pbmNsdWRlcygnU3RhdHVzIDogVW5zdXBwb3J0ZWQnKSkge1xuICAgICAgLy8gSWYgUk1NIHNheXMgXCJVbnN1cHBvcnRlZFwiLCBjaGVjayBpZiBpdCdzIGR1ZSB0byBTZWN1cmVCb290IG9yIG90aGVyIGlzc3Vlc1xuICAgICAgaWYgKHNlY3VyZUJvb3RDYXBhYmxlICYmIG1lbW9yeVBhc3NlZCAmJiB0cG1QYXNzZWQgJiYgcHJvY2Vzc29yUGFzc2VkKSB7XG4gICAgICAgIC8vIEhhcmR3YXJlIG1lZXRzIHJlcXVpcmVtZW50cyBidXQgc29tZXRoaW5nIGVsc2UgKGxpa2VseSBTZWN1cmVCb290IGRpc2FibGVkKVxuICAgICAgICByZXN1bHQud2luMTFfcmVhZHkgPSAnVW5zdXBwb3J0ZWQnXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBIYXJkd2FyZSBkb2Vzbid0IG1lZXQgYmFzaWMgcmVxdWlyZW1lbnRzXG4gICAgICAgIHJlc3VsdC53aW4xMV9yZWFkeSA9ICdGYWlsJ1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAob3V0cHV0LmluY2x1ZGVzKCdTdGF0dXMgOiBVbmtub3duJykpIHtcbiAgICAgIHJlc3VsdC53aW4xMV9yZWFkeSA9ICdPZmZsaW5lJ1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBGYWxsYmFjayBsb2dpYyBmb3IgbWFjaGluZXMgd2l0aG91dCBleHBsaWNpdCBzdGF0dXNcbiAgICAgIGlmIChpc1dpbmRvd3MxMSAmJiBtZW1vcnlQYXNzZWQgJiYgdHBtUGFzc2VkICYmIHNlY3VyZUJvb3RQYXNzZWQgJiYgcHJvY2Vzc29yUGFzc2VkKSB7XG4gICAgICAgIHJlc3VsdC53aW4xMV9yZWFkeSA9ICdQYXNzJyAvLyBBbHJlYWR5IG9uIFdpbmRvd3MgMTEgYW5kIGV2ZXJ5dGhpbmcgd29ya3NcbiAgICAgIH0gZWxzZSBpZiAobWVtb3J5UGFzc2VkICYmIHRwbVBhc3NlZCAmJiBzZWN1cmVCb290UGFzc2VkICYmIHByb2Nlc3NvclBhc3NlZCkge1xuICAgICAgICBpZiAocmVzdWx0LnNlY3VyZV9ib290ID09PSAnRW5hYmxlZCcpIHtcbiAgICAgICAgICByZXN1bHQud2luMTFfcmVhZHkgPSAnUGFzcycgLy8gUmVhZHkgZm9yIFdpbmRvd3MgMTFcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXN1bHQud2luMTFfcmVhZHkgPSAnVW5zdXBwb3J0ZWQnIC8vIENhcGFibGUgYnV0IFNlY3VyZUJvb3QgZGlzYWJsZWRcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gQ2hlY2sgd2hhdCdzIGZhaWxpbmdcbiAgICAgICAgaWYgKCFtZW1vcnlQYXNzZWQgfHwgIXRwbVBhc3NlZCB8fCAhcHJvY2Vzc29yUGFzc2VkKSB7XG4gICAgICAgICAgcmVzdWx0LndpbjExX3JlYWR5ID0gJ0ZhaWwnIC8vIEhhcmR3YXJlIGRvZXNuJ3QgbWVldCByZXF1aXJlbWVudHNcbiAgICAgICAgfSBlbHNlIGlmICghc2VjdXJlQm9vdFBhc3NlZCkge1xuICAgICAgICAgIHJlc3VsdC53aW4xMV9yZWFkeSA9ICdVbnN1cHBvcnRlZCcgLy8gSGFyZHdhcmUgZG9lc24ndCBzdXBwb3J0IFNlY3VyZUJvb3RcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXN1bHQud2luMTFfcmVhZHkgPSAnRmFpbCcgLy8gT3RoZXIgY29tcGF0aWJpbGl0eSBpc3N1ZXNcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXN1bHRcbiAgfVxuXG4gIC8vIEhlbHBlciBmdW5jdGlvbiB0byBkZXRlcm1pbmUgSW50ZWwgZ2VuZXJhdGlvbiAoZnJvbSBQeXRob24gc2NyaXB0KVxuICBmdW5jdGlvbiBnZXRJbnRlbEdlbmVyYXRpb24obW9kZWxOdW1iZXI6IG51bWJlcik6IG51bWJlciB7XG4gICAgLy8gSW50ZWwgbW9kZWwgbnVtYmVyIHRvIGdlbmVyYXRpb24gbWFwcGluZyBcbiAgICAvLyBCYXNlZCBvbiBhY3R1YWwgSW50ZWwgcHJvY2Vzc29yIG1vZGVsIG51bWJlcnNcbiAgICBcbiAgICBpZiAobW9kZWxOdW1iZXIgPj0gMjA2KSByZXR1cm4gMTQ7IC8vIDE0dGggZ2VuIChNZXRlb3IgTGFrZSwgQXJyb3cgTGFrZSlcbiAgICBpZiAobW9kZWxOdW1iZXIgPj0gMTgzKSByZXR1cm4gMTM7IC8vIDEzdGggZ2VuIChSYXB0b3IgTGFrZSlcbiAgICBpZiAobW9kZWxOdW1iZXIgPj0gMTU0KSByZXR1cm4gMTI7IC8vIDEydGggZ2VuIChBbGRlciBMYWtlKVxuICAgIGlmIChtb2RlbE51bWJlciA+PSAxNDApIHJldHVybiAxMTsgLy8gMTF0aCBnZW4gKFRpZ2VyIExha2UsIFJvY2tldCBMYWtlKSAgXG4gICAgaWYgKG1vZGVsTnVtYmVyID49IDEyNSkgcmV0dXJuIDEwOyAvLyAxMHRoIGdlbiAoSWNlIExha2UsIENvbWV0IExha2UpXG4gICAgaWYgKG1vZGVsTnVtYmVyID49IDE1OSkgcmV0dXJuIDk7ICAvLyA5dGggZ2VuIChDb2ZmZWUgTGFrZSBSZWZyZXNoKSAtIHNwZWNpZmljIG1vZGVsc1xuICAgIGlmIChtb2RlbE51bWJlciA+PSAxNDIpIHJldHVybiA4OyAgLy8gOHRoIGdlbiAoQ29mZmVlIExha2UpIC0gaW5jbHVkZXMgTW9kZWwgMTU4XG4gICAgaWYgKG1vZGVsTnVtYmVyID49IDc4KSByZXR1cm4gNzsgICAvLyA3dGggZ2VuIChLYWJ5IExha2UpXG4gICAgaWYgKG1vZGVsTnVtYmVyID49IDc0KSByZXR1cm4gNjsgICAvLyA2dGggZ2VuIChTa3lsYWtlKVxuICAgIGlmIChtb2RlbE51bWJlciA+PSA2MSkgcmV0dXJuIDU7ICAgLy8gNXRoIGdlbiAoQnJvYWR3ZWxsKVxuICAgIGlmIChtb2RlbE51bWJlciA+PSA2MCkgcmV0dXJuIDQ7ICAgLy8gNHRoIGdlbiAoSGFzd2VsbClcbiAgICBpZiAobW9kZWxOdW1iZXIgPj0gNTgpIHJldHVybiAzOyAgIC8vIDNyZCBnZW4gKEl2eSBCcmlkZ2UpXG4gICAgaWYgKG1vZGVsTnVtYmVyID49IDQyKSByZXR1cm4gMjsgICAvLyAybmQgZ2VuIChTYW5keSBCcmlkZ2UpXG4gICAgaWYgKG1vZGVsTnVtYmVyID49IDI2KSByZXR1cm4gMTsgICAvLyAxc3QgZ2VuIChOZWhhbGVtLCBXZXN0bWVyZSlcbiAgICBcbiAgICByZXR1cm4gMDsgLy8gVW5rbm93biBvciB2ZXJ5IG9sZFxuICB9XG5cbiAgLy8gUHJvY2VzcyBlYWNoIG1hY2hpbmVcbiAgY29uc3QgcHJvY2Vzc2VkRGF0YSA9IHJtbURhdGEubWFwKG1hY2hpbmUgPT4ge1xuICAgIC8vIEdldCB0aGUgT3V0cHV0IGRhdGEgLSB0aGlzIGNvbnRhaW5zIHRoZSBhY3R1YWwgV2luZG93cyAxMSBjb21wYXRpYmlsaXR5IGluZm9cbiAgICBsZXQgb3V0cHV0VGV4dCA9IG1hY2hpbmVbJ091dHB1dCddIHx8ICcnXG4gICAgY29uc3Qgb3V0cHV0RGF0YSA9IHBhcnNlT3V0cHV0RGF0YShvdXRwdXRUZXh0KVxuICAgIFxuICAgIC8vIEZpbmQgbWF0Y2hpbmcgU2NhbGVQYWQgZGF0YVxuICAgIGNvbnN0IHNjYWxlcGFkTWF0Y2ggPSBzY2FsZXBhZERhdGEuZmluZChzcCA9PiB7XG4gICAgICBjb25zdCBtYWNoaW5lTmFtZSA9IChtYWNoaW5lWydNYWNoaW5lIG5hbWUnXSB8fCAnJykudG9Mb3dlckNhc2UoKS50cmltKClcbiAgICAgIGNvbnN0IHNjYWxlcGFkTmFtZSA9IChzcFsnTmFtZSddIHx8ICcnKS50b0xvd2VyQ2FzZSgpLnRyaW0oKVxuICAgICAgcmV0dXJuIG1hY2hpbmVOYW1lID09PSBzY2FsZXBhZE5hbWVcbiAgICB9KVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICdXb3Jrc3RhdGlvbic6IG1hY2hpbmVbJ01hY2hpbmUgbmFtZSddIHx8ICdVbmtub3duJyxcbiAgICAgICdGcmllbmRseSBOYW1lJzogbWFjaGluZVsnRnJpZW5kbHkgbmFtZSddIHx8ICcnLFxuICAgICAgJ1NpdGUnOiBtYWNoaW5lWydTaXRlIG5hbWUnXSB8fCAnJyxcbiAgICAgICdTZXJpYWwnOiBzY2FsZXBhZE1hdGNoPy5bJ1NlcmlhbCddIHx8ICcnLFxuICAgICAgJ1dpbmRvd3MgMTEgU3RhdHVzJzogb3V0cHV0RGF0YS53aW4xMV9yZWFkeSwgLy8gVGhpcyBpcyB0aGUga2V5IGZpZWxkIVxuICAgICAgJ1JBTSc6IG91dHB1dERhdGEucmFtLFxuICAgICAgJ0NQVSc6IG91dHB1dERhdGEuY3B1LFxuICAgICAgJ1RQTSBWZXJzaW9uJzogb3V0cHV0RGF0YS50cG0sXG4gICAgICAnU2VjdXJlQm9vdCc6IG91dHB1dERhdGEuc2VjdXJlX2Jvb3QsXG4gICAgICAnT1MgVmVyc2lvbic6IG91dHB1dERhdGEub3MsXG4gICAgICAnV2FycmFudHkgRXhwaXJlcyc6IHNjYWxlcGFkTWF0Y2g/LlsnRXhwaXJlcyddIHx8ICdVbmtub3duJyxcbiAgICAgICdJbiBTY2FsZVBhZCc6IHNjYWxlcGFkTWF0Y2ggPyAnWWVzJyA6ICdObydcbiAgICB9XG4gIH0pXG5cbiAgcmV0dXJuIHByb2Nlc3NlZERhdGFcbn1cblxuLy8gR2VuZXJhdGUgc3VtbWFyeSBzdGF0aXN0aWNzXG5mdW5jdGlvbiBnZW5lcmF0ZVN1bW1hcnkocHJvY2Vzc2VkRGF0YTogYW55W10pIHtcbiAgY29uc3QgdG90YWwgPSBwcm9jZXNzZWREYXRhLmxlbmd0aFxuICBjb25zdCBjb21wYXRpYmxlID0gcHJvY2Vzc2VkRGF0YS5maWx0ZXIocm93ID0+IHJvd1snV2luZG93cyAxMSBTdGF0dXMnXSA9PT0gJ1Bhc3MnKS5sZW5ndGhcbiAgY29uc3Qgbm90Q29tcGF0aWJsZSA9IHByb2Nlc3NlZERhdGEuZmlsdGVyKHJvdyA9PiByb3dbJ1dpbmRvd3MgMTEgU3RhdHVzJ10gPT09ICdGYWlsJykubGVuZ3RoXG4gIGNvbnN0IHVuc3VwcG9ydGVkID0gcHJvY2Vzc2VkRGF0YS5maWx0ZXIocm93ID0+IHJvd1snV2luZG93cyAxMSBTdGF0dXMnXSA9PT0gJ1Vuc3VwcG9ydGVkJykubGVuZ3RoXG4gIGNvbnN0IG9mZmxpbmUgPSBwcm9jZXNzZWREYXRhLmZpbHRlcihyb3cgPT4gXG4gICAgcm93WydXaW5kb3dzIDExIFN0YXR1cyddID09PSAnT2ZmbGluZScgfHwgcm93WydXaW5kb3dzIDExIFN0YXR1cyddID09PSAnVW5rbm93bidcbiAgKS5sZW5ndGhcblxuICBjb25zdCBzZWN1cmVCb290U3RhdHMgPSB7XG4gICAgY2FwYWJsZUVuYWJsZWQ6IHByb2Nlc3NlZERhdGEuZmlsdGVyKHJvdyA9PiBcbiAgICAgIHJvd1snU2VjdXJlQm9vdCddID09PSAnRW5hYmxlZCdcbiAgICApLmxlbmd0aCxcbiAgICBjYXBhYmxlRGlzYWJsZWQ6IHByb2Nlc3NlZERhdGEuZmlsdGVyKHJvdyA9PiBcbiAgICAgIHJvd1snU2VjdXJlQm9vdCddID09PSAnQ2FwYWJsZSBidXQgRGlzYWJsZWQnXG4gICAgKS5sZW5ndGgsXG4gICAgbm90Q2FwYWJsZTogcHJvY2Vzc2VkRGF0YS5maWx0ZXIocm93ID0+IFxuICAgICAgcm93WydTZWN1cmVCb290J10gPT09ICdOb3QgQ2FwYWJsZSdcbiAgICApLmxlbmd0aCxcbiAgICBvZmZsaW5lOiBwcm9jZXNzZWREYXRhLmZpbHRlcihyb3cgPT4gXG4gICAgICByb3dbJ1NlY3VyZUJvb3QnXSA9PT0gJ09mZmxpbmUnIHx8IHJvd1snU2VjdXJlQm9vdCddID09PSAnVW5rbm93bidcbiAgICApLmxlbmd0aFxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICAgIHRvdGFsLFxuICAgICAgY29tcGF0aWJsZSxcbiAgICBub3RDb21wYXRpYmxlLFxuICAgICAgdW5zdXBwb3J0ZWQsXG4gICAgb2ZmbGluZSxcbiAgICBzZWN1cmVCb290U3RhdHNcbiAgfVxufVxuXG4vLyBHZW5lcmF0ZSBFeGNlbCBmaWxlIChzaW1wbGlmaWVkIC0gaW4gcHJvZHVjdGlvbiB5b3UnZCB1c2UgYSBsaWJyYXJ5IGxpa2UgeGxzeClcbmZ1bmN0aW9uIGdlbmVyYXRlRXhjZWxGaWxlKHByb2Nlc3NlZERhdGE6IGFueVtdLCBjb21wYW55SW5mbzogeyBuYW1lOiBzdHJpbmc7IHNpdGU6IHN0cmluZzsgdGVuYW50OiBzdHJpbmcgfSkge1xuICAvLyBGb3Igbm93LCB3ZSdsbCByZXR1cm4gYSBDU1YgZm9ybWF0IGFzIGJhc2U2NFxuICAvLyBJbiBwcm9kdWN0aW9uLCB5b3UnZCB1c2UgeGxzeCBsaWJyYXJ5IHRvIGNyZWF0ZSBhY3R1YWwgRXhjZWwgZmlsZXNcbiAgY29uc3QgaGVhZGVycyA9IFtcbiAgICAnV29ya3N0YXRpb24nLCAnRnJpZW5kbHkgTmFtZScsICdTaXRlJywgJ1NlcmlhbCcsICdXaW5kb3dzIDExIFN0YXR1cycsXG4gICAgJ1JBTScsICdDUFUnLCAnVFBNIFZlcnNpb24nLCAnU2VjdXJlQm9vdCcsICdPUyBWZXJzaW9uJywgJ1dhcnJhbnR5IEV4cGlyZXMnLCAnSW4gU2NhbGVQYWQnXG4gIF1cbiAgXG4gIGxldCBjc3ZDb250ZW50ID0gaGVhZGVycy5qb2luKCcsJykgKyAnXFxuJ1xuICBcbiAgcHJvY2Vzc2VkRGF0YS5mb3JFYWNoKHJvdyA9PiB7XG4gICAgY29uc3QgdmFsdWVzID0gaGVhZGVycy5tYXAoaGVhZGVyID0+IHtcbiAgICAgIGNvbnN0IHZhbHVlID0gcm93W2hlYWRlcl0gfHwgJydcbiAgICAgIHJldHVybiBgXCIke3ZhbHVlLnRvU3RyaW5nKCkucmVwbGFjZSgvXCIvZywgJ1wiXCInKX1cImBcbiAgICB9KVxuICAgIGNzdkNvbnRlbnQgKz0gdmFsdWVzLmpvaW4oJywnKSArICdcXG4nXG4gIH0pXG5cbiAgcmV0dXJuIEJ1ZmZlci5mcm9tKGNzdkNvbnRlbnQpLnRvU3RyaW5nKCdiYXNlNjQnKVxufVxuXG4vLyBHZW5lcmF0ZSBjb21wcmVoZW5zaXZlIHJlcG9ydCBkYXRhIChubyBIVE1MIGZpbGUpXG5mdW5jdGlvbiBnZW5lcmF0ZVJlcG9ydERhdGEocHJvY2Vzc2VkRGF0YTogYW55W10sIGNvbXBhbnlJbmZvOiB7IG5hbWU6IHN0cmluZzsgc2l0ZTogc3RyaW5nOyB0ZW5hbnQ6IHN0cmluZyB9LCBzdGF0czogYW55KSB7XG4gIGNvbnN0IHsgdG90YWwsIGNvbXBhdGlibGUsIG5vdENvbXBhdGlibGUsIHVuc3VwcG9ydGVkLCBvZmZsaW5lLCBzZWN1cmVCb290U3RhdHMgfSA9IHN0YXRzXG4gIFxuICAvLyBDYWxjdWxhdGUgYWRkaXRpb25hbCBzdGF0aXN0aWNzIGZvciBjaGFydHNcbiAgY29uc3Qgc2l0ZVN0YXRzOiBhbnkgPSB7fVxuICBjb25zdCBvc1N0YXRzOiBhbnkgPSB7fVxuICBjb25zdCBjcHVTdGF0czogYW55ID0ge31cbiAgY29uc3QgcmFtU3RhdHM6IGFueSA9IHt9XG4gIFxuICBwcm9jZXNzZWREYXRhLmZvckVhY2gocm93ID0+IHtcbiAgICAvLyBTaXRlIHN0YXRpc3RpY3NcbiAgICBjb25zdCBzaXRlID0gcm93WydTaXRlJ10gfHwgJ1Vua25vd24nXG4gICAgaWYgKCFzaXRlU3RhdHNbc2l0ZV0pIHNpdGVTdGF0c1tzaXRlXSA9IHsgdG90YWw6IDAsIGNvbXBhdGlibGU6IDAsIG5vdENvbXBhdGlibGU6IDAsIHVuc3VwcG9ydGVkOiAwLCBvZmZsaW5lOiAwIH1cbiAgICBzaXRlU3RhdHNbc2l0ZV0udG90YWwrK1xuICAgIGlmIChyb3dbJ1dpbmRvd3MgMTEgU3RhdHVzJ10gPT09ICdQYXNzJykgc2l0ZVN0YXRzW3NpdGVdLmNvbXBhdGlibGUrK1xuICAgIGVsc2UgaWYgKHJvd1snV2luZG93cyAxMSBTdGF0dXMnXSA9PT0gJ0ZhaWwnKSBzaXRlU3RhdHNbc2l0ZV0ubm90Q29tcGF0aWJsZSsrXG4gICAgZWxzZSBpZiAocm93WydXaW5kb3dzIDExIFN0YXR1cyddID09PSAnVW5zdXBwb3J0ZWQnKSBzaXRlU3RhdHNbc2l0ZV0udW5zdXBwb3J0ZWQrK1xuICAgIGVsc2Ugc2l0ZVN0YXRzW3NpdGVdLm9mZmxpbmUrK1xuICAgIFxuICAgIC8vIE9TIHN0YXRpc3RpY3NcbiAgICBjb25zdCBvcyA9IHJvd1snT1MgVmVyc2lvbiddIHx8ICdVbmtub3duJ1xuICAgIGlmICghb3NTdGF0c1tvc10pIG9zU3RhdHNbb3NdID0gMFxuICAgIG9zU3RhdHNbb3NdKytcbiAgICBcbiAgICAvLyBDUFUgc3RhdGlzdGljc1xuICAgIGNvbnN0IGNwdSA9IHJvd1snQ1BVJ10gfHwgJ1Vua25vd24nXG4gICAgaWYgKCFjcHVTdGF0c1tjcHVdKSBjcHVTdGF0c1tjcHVdID0gMFxuICAgIGNwdVN0YXRzW2NwdV0rK1xuICAgIFxuICAgIC8vIFJBTSBzdGF0aXN0aWNzXG4gICAgY29uc3QgcmFtID0gcm93WydSQU0nXSB8fCAnVW5rbm93bidcbiAgICBpZiAoIXJhbVN0YXRzW3JhbV0pIHJhbVN0YXRzW3JhbV0gPSAwXG4gICAgcmFtU3RhdHNbcmFtXSsrXG4gIH0pXG5cbiAgLy8gQ3JlYXRlIGNoYXJ0IGRhdGFcbiAgY29uc3QgcmVhZGluZXNzQ2hhcnREYXRhID0gW1xuICAgIHsgbmFtZTogJ1dpbmRvd3MgMTEgUmVhZHknLCB2YWx1ZTogY29tcGF0aWJsZSwgY29sb3I6ICcjNENBRjUwJyB9LFxuICAgIHsgbmFtZTogJ05vdCBXaW5kb3dzIDExIFJlYWR5JywgdmFsdWU6IG5vdENvbXBhdGlibGUsIGNvbG9yOiAnI0Y0NDMzNicgfSxcbiAgICB7IG5hbWU6ICdVbnN1cHBvcnRlZCcsIHZhbHVlOiB1bnN1cHBvcnRlZCwgY29sb3I6ICcjRkY5ODAwJyB9LFxuICAgIHsgbmFtZTogJ09mZmxpbmUnLCB2YWx1ZTogb2ZmbGluZSwgY29sb3I6ICcjOUU5RTlFJyB9XG4gIF1cblxuICBjb25zdCBzaXRlQ2hhcnREYXRhID0gT2JqZWN0LmtleXMoc2l0ZVN0YXRzKS5tYXAoc2l0ZSA9PiAoe1xuICAgIHNpdGUsXG4gICAgY29tcGF0aWJsZTogc2l0ZVN0YXRzW3NpdGVdLmNvbXBhdGlibGUsXG4gICAgbm90Q29tcGF0aWJsZTogc2l0ZVN0YXRzW3NpdGVdLm5vdENvbXBhdGlibGUsXG4gICAgdW5zdXBwb3J0ZWQ6IHNpdGVTdGF0c1tzaXRlXS51bnN1cHBvcnRlZCxcbiAgICBvZmZsaW5lOiBzaXRlU3RhdHNbc2l0ZV0ub2ZmbGluZVxuICB9KSlcblxuICBjb25zdCBzZWN1cmVCb290Q2hhcnREYXRhID0gW1xuICAgIHsgbmFtZTogJ0VuYWJsZWQnLCB2YWx1ZTogc2VjdXJlQm9vdFN0YXRzLmNhcGFibGVFbmFibGVkLCBjb2xvcjogJyM0Q0FGNTAnIH0sXG4gICAgeyBuYW1lOiAnRGlzYWJsZWQnLCB2YWx1ZTogc2VjdXJlQm9vdFN0YXRzLmNhcGFibGVEaXNhYmxlZCwgY29sb3I6ICcjRjQ0MzM2JyB9LFxuICAgIHsgbmFtZTogJ05vdCBQcmVzZW50JywgdmFsdWU6IHNlY3VyZUJvb3RTdGF0cy5ub3RDYXBhYmxlLCBjb2xvcjogJyNGRjk4MDAnIH0sXG4gICAgeyBuYW1lOiAnT2ZmbGluZScsIHZhbHVlOiBzZWN1cmVCb290U3RhdHMub2ZmbGluZSwgY29sb3I6ICcjOUU5RTlFJyB9XG4gIF1cblxuICByZXR1cm4ge1xuICAgIHN1bW1hcnk6IHtcbiAgICAgIHRvdGFsLFxuICAgICAgY29tcGF0aWJsZSxcbiAgICAgIG5vdENvbXBhdGlibGUsXG4gICAgICB1bnN1cHBvcnRlZCxcbiAgICAgIG9mZmxpbmUsXG4gICAgICBjb21wYXRpYmxlUGVyY2VudGFnZTogdG90YWwgPiAwID8gTWF0aC5yb3VuZCgoY29tcGF0aWJsZSAvIHRvdGFsKSAqIDEwMCkgOiAwLFxuICAgICAgbm90Q29tcGF0aWJsZVBlcmNlbnRhZ2U6IHRvdGFsID4gMCA/IE1hdGgucm91bmQoKG5vdENvbXBhdGlibGUgLyB0b3RhbCkgKiAxMDApIDogMCxcbiAgICAgIHVuc3VwcG9ydGVkUGVyY2VudGFnZTogdG90YWwgPiAwID8gTWF0aC5yb3VuZCgodW5zdXBwb3J0ZWQgLyB0b3RhbCkgKiAxMDApIDogMCxcbiAgICAgIG9mZmxpbmVQZXJjZW50YWdlOiB0b3RhbCA+IDAgPyBNYXRoLnJvdW5kKChvZmZsaW5lIC8gdG90YWwpICogMTAwKSA6IDBcbiAgICB9LFxuICAgIHNlY3VyZUJvb3RTdGF0cyxcbiAgICBjaGFydHM6IHtcbiAgICAgIHJlYWRpbmVzczogcmVhZGluZXNzQ2hhcnREYXRhLFxuICAgICAgc2l0ZUJyZWFrZG93bjogc2l0ZUNoYXJ0RGF0YSxcbiAgICAgIHNlY3VyZUJvb3Q6IHNlY3VyZUJvb3RDaGFydERhdGFcbiAgICB9LFxuICAgIGRhdGE6IHByb2Nlc3NlZERhdGEsXG4gICAgY29tcGFueUluZm9cbiAgfVxufVxuXG4vLyBHZW5lcmF0ZSByZWNvbW1lbmRhdGlvbnMgYmFzZWQgb24gdGhlIGRhdGFcbmZ1bmN0aW9uIGdlbmVyYXRlUmVjb21tZW5kYXRpb25zKHByb2Nlc3NlZERhdGE6IGFueVtdLCBzdGF0czogYW55KSB7XG4gIGNvbnN0IHsgc3VtbWFyeSB9ID0gc3RhdHNcbiAgY29uc3QgcmVjb21tZW5kYXRpb25zID0gW11cbiAgXG4gIC8vIFdpbmRvd3MgMTEgcmVhZGluZXNzIHJlY29tbWVuZGF0aW9uc1xuICBpZiAoc3VtbWFyeS5ub3RDb21wYXRpYmxlID4gMCkge1xuICAgIHJlY29tbWVuZGF0aW9ucy5wdXNoKHtcbiAgICAgIHR5cGU6ICd3YXJuaW5nJyxcbiAgICAgIHRpdGxlOiAnSGFyZHdhcmUgVXBncmFkZXMgTmVlZGVkJyxcbiAgICAgIGRlc2NyaXB0aW9uOiBgJHtzdW1tYXJ5Lm5vdENvbXBhdGlibGV9IHdvcmtzdGF0aW9ucyBuZWVkIGhhcmR3YXJlIHVwZ3JhZGVzIHRvIHN1cHBvcnQgV2luZG93cyAxMWAsXG4gICAgICBwcmlvcml0eTogJ2hpZ2gnXG4gICAgfSlcbiAgfVxuICBcbiAgaWYgKHN1bW1hcnkudW5zdXBwb3J0ZWQgPiAwKSB7XG4gICAgcmVjb21tZW5kYXRpb25zLnB1c2goe1xuICAgICAgdHlwZTogJ2luZm8nLFxuICAgICAgdGl0bGU6ICdTZWN1cmVCb290IENvbmZpZ3VyYXRpb24nLFxuICAgICAgZGVzY3JpcHRpb246IGAke3N1bW1hcnkudW5zdXBwb3J0ZWR9IHdvcmtzdGF0aW9ucyBhcmUgV2luZG93cyAxMSByZWFkeSBidXQgaGF2ZSBTZWN1cmVCb290IGRpc2FibGVkYCxcbiAgICAgIHByaW9yaXR5OiAnbWVkaXVtJ1xuICAgIH0pXG4gIH1cbiAgXG4gIGlmIChzdW1tYXJ5Lm9mZmxpbmUgPiAwKSB7XG4gICAgcmVjb21tZW5kYXRpb25zLnB1c2goe1xuICAgICAgdHlwZTogJ3dhcm5pbmcnLFxuICAgICAgdGl0bGU6ICdPZmZsaW5lIFN5c3RlbXMnLFxuICAgICAgZGVzY3JpcHRpb246IGAke3N1bW1hcnkub2ZmbGluZX0gd29ya3N0YXRpb25zIGFyZSBvZmZsaW5lIGFuZCBuZWVkIHRvIGJlIGNoZWNrZWQgZm9yIFdpbmRvd3MgMTEgcmVhZGluZXNzYCxcbiAgICAgIHByaW9yaXR5OiAnbWVkaXVtJ1xuICAgIH0pXG4gIH1cbiAgXG4gIC8vIFdhcnJhbnR5IHJlY29tbWVuZGF0aW9uc1xuICBjb25zdCBleHBpcmVkV2FycmFudHkgPSBwcm9jZXNzZWREYXRhLmZpbHRlcihyb3cgPT4gcm93WydXYXJyYW50eSBFeHBpcmVzJ10gPT09ICdFeHBpcmVkJykubGVuZ3RoXG4gIGlmIChleHBpcmVkV2FycmFudHkgPiAwKSB7XG4gICAgcmVjb21tZW5kYXRpb25zLnB1c2goe1xuICAgICAgdHlwZTogJ2Vycm9yJyxcbiAgICAgIHRpdGxlOiAnV2FycmFudHkgRXhwaXJlZCcsXG4gICAgICBkZXNjcmlwdGlvbjogYCR7ZXhwaXJlZFdhcnJhbnR5fSB3b3Jrc3RhdGlvbnMgaGF2ZSBleHBpcmVkIHdhcnJhbnRpZXNgLFxuICAgICAgcHJpb3JpdHk6ICdoaWdoJ1xuICAgIH0pXG4gIH1cbiAgXG4gIGNvbnN0IG5vdEluU2NhbGVQYWQgPSBwcm9jZXNzZWREYXRhLmZpbHRlcihyb3cgPT4gcm93WydJbiBTY2FsZVBhZCddID09PSAnTm8nKS5sZW5ndGhcbiAgaWYgKG5vdEluU2NhbGVQYWQgPiAwKSB7XG4gICAgcmVjb21tZW5kYXRpb25zLnB1c2goe1xuICAgICAgdHlwZTogJ3dhcm5pbmcnLFxuICAgICAgdGl0bGU6ICdNaXNzaW5nIGZyb20gU2NhbGVQYWQnLFxuICAgICAgZGVzY3JpcHRpb246IGAke25vdEluU2NhbGVQYWR9IHdvcmtzdGF0aW9ucyBhcmUgbm90IHRyYWNrZWQgaW4gU2NhbGVQYWRgLFxuICAgICAgcHJpb3JpdHk6ICdtZWRpdW0nXG4gICAgfSlcbiAgfVxuICBcbiAgcmV0dXJuIHJlY29tbWVuZGF0aW9uc1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gUE9TVChyZXF1ZXN0OiBOZXh0UmVxdWVzdCkge1xuICB0cnkge1xuICAgIGNvbnN0IGRhdGE6IFByb2Nlc3NSZXBvcnRzUmVxdWVzdCA9IGF3YWl0IHJlcXVlc3QuanNvbigpXG4gICAgXG4gICAgY29uc29sZS5sb2coJ1Byb2Nlc3NpbmcgcmVxdWVzdCBmb3I6JywgZGF0YS5jb21wYW55SW5mbz8ubmFtZSwgJ3dpdGgnLCBkYXRhLmZpbGVzPy5sZW5ndGgsICdmaWxlcycpXG4gICAgXG4gICAgLy8gVmFsaWRhdGUgaW5wdXRcbiAgICBpZiAoIWRhdGEuZmlsZXMgfHwgZGF0YS5maWxlcy5sZW5ndGggIT09IDIpIHtcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICAgICAgeyBlcnJvcjogJ1R3byBmaWxlcyBhcmUgcmVxdWlyZWQ6IFJNTSBSZXBvcnQgYW5kIFNjYWxlUGFkIFJlcG9ydCcgfSxcbiAgICAgICAgeyBzdGF0dXM6IDQwMCB9XG4gICAgICApXG4gICAgfVxuXG4gICAgaWYgKCFkYXRhLmNvbXBhbnlJbmZvPy5uYW1lPy50cmltKCkpIHtcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICAgICAgeyBlcnJvcjogJ0NvbXBhbnkgbmFtZSBpcyByZXF1aXJlZCcgfSxcbiAgICAgICAgeyBzdGF0dXM6IDQwMCB9XG4gICAgICApXG4gICAgfVxuXG4gICAgaWYgKCFkYXRhLmNvbXBhbnlJbmZvPy50ZW5hbnQ/LnRyaW0oKSkge1xuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgICAgICB7IGVycm9yOiAnVGVuYW50IHNsdWcgaXMgcmVxdWlyZWQnIH0sXG4gICAgICAgIHsgc3RhdHVzOiA0MDAgfVxuICAgICAgKVxuICAgIH1cblxuICAgIC8vIEZpbmQgUk1NIGFuZCBTY2FsZVBhZCBmaWxlc1xuICAgIGNvbnN0IHJtbUZpbGUgPSBkYXRhLmZpbGVzLmZpbmQoZiA9PiBmLnR5cGUgPT09ICdybW0nKVxuICAgIGNvbnN0IHNjYWxlcGFkRmlsZSA9IGRhdGEuZmlsZXMuZmluZChmID0+IGYudHlwZSA9PT0gJ3NjYWxlcGFkJylcblxuICAgIGlmICghcm1tRmlsZSB8fCAhc2NhbGVwYWRGaWxlKSB7XG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICAgIHsgZXJyb3I6ICdCb3RoIFJNTSBhbmQgU2NhbGVQYWQgZmlsZXMgYXJlIHJlcXVpcmVkJyB9LFxuICAgICAgICB7IHN0YXR1czogNDAwIH1cbiAgICAgIClcbiAgICB9XG5cbiAgICBjb25zb2xlLmxvZygnUHJvY2Vzc2luZycsIHJtbUZpbGUuZGF0YS5sZW5ndGgsICdtYWNoaW5lcyBmcm9tIFJNTSByZXBvcnQnKVxuICAgIFxuICAgIC8vIFByb2Nlc3MgdGhlIGRhdGFcbiAgICBjb25zdCBwcm9jZXNzZWREYXRhID0gcHJvY2Vzc1JtbURhdGEocm1tRmlsZS5kYXRhLCBzY2FsZXBhZEZpbGUuZGF0YSwgZGF0YS5jb21wYW55SW5mbylcbiAgICBcbiAgICAvLyBHZW5lcmF0ZSBzdW1tYXJ5IHN0YXRpc3RpY3NcbiAgICBjb25zdCBzdW1tYXJ5ID0gZ2VuZXJhdGVTdW1tYXJ5KHByb2Nlc3NlZERhdGEpXG4gICAgXG4gICAgLy8gR2VuZXJhdGUgcmVwb3J0IGRhdGFcbiAgICBjb25zdCByZXBvcnREYXRhID0gZ2VuZXJhdGVSZXBvcnREYXRhKHByb2Nlc3NlZERhdGEsIGRhdGEuY29tcGFueUluZm8sIHN1bW1hcnkpXG4gICAgXG4gICAgLy8gR2VuZXJhdGUgRXhjZWwgZmlsZVxuICAgIHRyeSB7XG4gICAgICBjb25zdCBleGNlbEZpbGUgPSBnZW5lcmF0ZUV4Y2VsRmlsZShwcm9jZXNzZWREYXRhLCBkYXRhLmNvbXBhbnlJbmZvKVxuICAgICAgY29uc29sZS5sb2coJ0V4Y2VsIGZpbGUgZ2VuZXJhdGVkIHN1Y2Nlc3NmdWxseSwgbGVuZ3RoOicsIGV4Y2VsRmlsZS5sZW5ndGgpXG5cbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7XG4gICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgIHN1bW1hcnk6IHJlcG9ydERhdGEuc3VtbWFyeSxcbiAgICAgICAgc2VjdXJlQm9vdFN0YXRzOiByZXBvcnREYXRhLnNlY3VyZUJvb3RTdGF0cywgXG4gICAgICAgIGNoYXJ0czogcmVwb3J0RGF0YS5jaGFydHMsXG4gICAgICAgIGRhdGE6IHJlcG9ydERhdGEuZGF0YSxcbiAgICAgICAgY29tcGFueUluZm86IHJlcG9ydERhdGEuY29tcGFueUluZm8sXG4gICAgICAgIGZpbGVzOiB7XG4gICAgICAgICAgZXhjZWw6IGBkYXRhOnRleHQvY3N2O2Jhc2U2NCwke2V4Y2VsRmlsZX1gXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGdlbmVyYXRpbmcgRXhjZWwgZmlsZTonLCBlcnJvcilcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7XG4gICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgIHN1bW1hcnk6IHJlcG9ydERhdGEuc3VtbWFyeSxcbiAgICAgICAgc2VjdXJlQm9vdFN0YXRzOiByZXBvcnREYXRhLnNlY3VyZUJvb3RTdGF0cywgXG4gICAgICAgIGNoYXJ0czogcmVwb3J0RGF0YS5jaGFydHMsXG4gICAgICAgIGRhdGE6IHJlcG9ydERhdGEuZGF0YSxcbiAgICAgICAgY29tcGFueUluZm86IHJlcG9ydERhdGEuY29tcGFueUluZm8sXG4gICAgICAgIGZpbGVzOiB7XG4gICAgICAgICAgZXhjZWw6IG51bGxcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG5cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICB7IGVycm9yOiAnSW50ZXJuYWwgc2VydmVyIGVycm9yJyB9LFxuICAgICAgeyBzdGF0dXM6IDUwMCB9XG4gICAgKVxuICB9XG59ICJdLCJuYW1lcyI6WyJOZXh0UmVzcG9uc2UiLCJwcm9jZXNzUm1tRGF0YSIsInJtbURhdGEiLCJzY2FsZXBhZERhdGEiLCJjb21wYW55SW5mbyIsInBhcnNlT3V0cHV0RGF0YSIsIm91dHB1dFRleHQiLCJ0cmltIiwid2luMTFfcmVhZHkiLCJyYW0iLCJ0cG0iLCJjcHUiLCJvcyIsInNlY3VyZV9ib290Iiwib3V0cHV0IiwiaW5jbHVkZXMiLCJyZXN1bHQiLCJtZW1vcnlNYXRjaCIsIm1hdGNoIiwidHBtTWF0Y2giLCJzcGxpdCIsIm9zTWF0Y2giLCJyZXBsYWNlIiwic2VjdXJlQm9vdENhcGFibGUiLCJzZWN1cmVCb290RGlzYWJsZWQiLCJzZWN1cmVCb290RW5hYmxlZCIsInByb2Nlc3Nvck1hdGNoIiwibW9kZWwiLCJwYXJzZUludCIsImdlbmVyYXRpb24iLCJnZXRJbnRlbEdlbmVyYXRpb24iLCJtZW1vcnlQYXNzZWQiLCJ0cG1QYXNzZWQiLCJzZWN1cmVCb290UGFzc2VkIiwicHJvY2Vzc29yUGFzc2VkIiwiaXNXaW5kb3dzMTEiLCJtb2RlbE51bWJlciIsInByb2Nlc3NlZERhdGEiLCJtYXAiLCJtYWNoaW5lIiwib3V0cHV0RGF0YSIsInNjYWxlcGFkTWF0Y2giLCJmaW5kIiwic3AiLCJtYWNoaW5lTmFtZSIsInRvTG93ZXJDYXNlIiwic2NhbGVwYWROYW1lIiwiZ2VuZXJhdGVTdW1tYXJ5IiwidG90YWwiLCJsZW5ndGgiLCJjb21wYXRpYmxlIiwiZmlsdGVyIiwicm93Iiwibm90Q29tcGF0aWJsZSIsInVuc3VwcG9ydGVkIiwib2ZmbGluZSIsInNlY3VyZUJvb3RTdGF0cyIsImNhcGFibGVFbmFibGVkIiwiY2FwYWJsZURpc2FibGVkIiwibm90Q2FwYWJsZSIsImdlbmVyYXRlRXhjZWxGaWxlIiwiaGVhZGVycyIsImNzdkNvbnRlbnQiLCJqb2luIiwiZm9yRWFjaCIsInZhbHVlcyIsImhlYWRlciIsInZhbHVlIiwidG9TdHJpbmciLCJCdWZmZXIiLCJmcm9tIiwiZ2VuZXJhdGVSZXBvcnREYXRhIiwic3RhdHMiLCJzaXRlU3RhdHMiLCJvc1N0YXRzIiwiY3B1U3RhdHMiLCJyYW1TdGF0cyIsInNpdGUiLCJyZWFkaW5lc3NDaGFydERhdGEiLCJuYW1lIiwiY29sb3IiLCJzaXRlQ2hhcnREYXRhIiwiT2JqZWN0Iiwia2V5cyIsInNlY3VyZUJvb3RDaGFydERhdGEiLCJzdW1tYXJ5IiwiY29tcGF0aWJsZVBlcmNlbnRhZ2UiLCJNYXRoIiwicm91bmQiLCJub3RDb21wYXRpYmxlUGVyY2VudGFnZSIsInVuc3VwcG9ydGVkUGVyY2VudGFnZSIsIm9mZmxpbmVQZXJjZW50YWdlIiwiY2hhcnRzIiwicmVhZGluZXNzIiwic2l0ZUJyZWFrZG93biIsInNlY3VyZUJvb3QiLCJkYXRhIiwiZ2VuZXJhdGVSZWNvbW1lbmRhdGlvbnMiLCJyZWNvbW1lbmRhdGlvbnMiLCJwdXNoIiwidHlwZSIsInRpdGxlIiwiZGVzY3JpcHRpb24iLCJwcmlvcml0eSIsImV4cGlyZWRXYXJyYW50eSIsIm5vdEluU2NhbGVQYWQiLCJQT1NUIiwicmVxdWVzdCIsImpzb24iLCJjb25zb2xlIiwibG9nIiwiZmlsZXMiLCJlcnJvciIsInN0YXR1cyIsInRlbmFudCIsInJtbUZpbGUiLCJmIiwic2NhbGVwYWRGaWxlIiwicmVwb3J0RGF0YSIsImV4Y2VsRmlsZSIsInN1Y2Nlc3MiLCJleGNlbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/process-reports/route.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fprocess-reports%2Froute&page=%2Fapi%2Fprocess-reports%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fprocess-reports%2Froute.ts&appDir=C%3A%5CTemp%5CWindows11-Readiness-Webapp%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CTemp%5CWindows11-Readiness-Webapp&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();